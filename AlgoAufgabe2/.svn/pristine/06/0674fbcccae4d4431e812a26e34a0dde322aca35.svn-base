package de.ostfalia.algo.aufgabe2;

public class Aufgabe2 implements A2Interface {

	private int zaehler = 0;

	@Override
	public int binomialkoeffizient_Fakultaet(int n, int k) {
		// TODO: k muss kleiner als n sein, n darf max 12 sein.
		// Zähler:
		int fak_n = this.fakultaet(n);
		// Nenner:
		int fak_k = this.fakultaet(k);
		int fak_nk = this.fakultaet(n - k);
		// Multiplikation im Nenner
		int nenner = fak_k * fak_nk;
		// Zähler geteilt durch Nenner
		int result = fak_n / nenner;
		this.zaehler = zaehler / 2;
		return result;
	}

	@Override
	public int fakultaet(int n) {
		// TODO: Gültige Werte nur bei n<=12, alles >=13 muss abgefangen werden.
		int result = 0;
		if (n == 0) {
			result = 1;
		} else if (n == 1) {
			result = 1;
			zaehler += 1;
		} else {
			result = n * fakultaet(n - 1);
			zaehler += 1;
		}
		return result;
	}

	@Override
	public int binomialkoeffizient_Iterativ(int n, int k) {

		// Nenner berechnen bevor k verändert wird
		int bruchnenner = fakultaet(k);
		int bruchzaehler = 0;

		if (k >= 1 && k <= n) {

			int buf = n;

			for (int i = n - 1; i >= ((n - k) + 1); i--) {
				buf *= i;
			}
			bruchzaehler = buf;
		}

		if (k == 0) {
			return 1;
		}

		int result = bruchzaehler / bruchnenner;

		return result;
	}

	@Override
	public int binomialkoeffizient_Rekursiv(int n, int k) {
		int result;
		this.zaehler++;
		if (k == 0) {
			return 1;
		} else if (2 * k > n) {
			result = this.binomialkoeffizient_Rekursiv(n, n - k);
		} else {
			result = n - k + 1;
			for (int i = 2; i < k; i++) {
				result = result * (n - k + i);
				result = result / i;
			}
		}
		return result;
	}

	@Override
	public int binomialkoeffizient_Iterativ2(int n, int k) {
		int[] bzaehler = new int[n - 2];
		int[] bnenner = new int[k];

		for (int i = n; n > 0; i--) {
			bzaehler[i] = i;
		}

		//### Wie bei Methode Iterativ() nur ausgabe in ein Array
//		if (k >= 1 && k <= n) {
//
//			int buf = n;
//
//			for (int i = n - 1; i >= ((n - k) + 1); i--) {
//				buf *= i; // In ein Array[i] schreiben
//			}
//			bruchzaehler = buf;
//		}
		
		// Arrays vergleichen und gleiche zahlen auf 1 setzen danach fertig ausmultiplizieren
		return 0;
	}

	@Override
	public int getZaehler() {
		int cnt = this.zaehler;
		this.zaehler = 0;
		return cnt;
	}

}
